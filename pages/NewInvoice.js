import axios from 'axios'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import Header from '../components/Header'
import SideBar from '../components/SideBar'
import { getAuthToken } from '../utils/functions'

const t = new Date();
const date = ('0' + t.getDate()).slice(-2);
const month = ('0' + (t.getMonth() + 1)).slice(-2);
const year = t.getFullYear();
const time = `${date}/${month}/${year}`;

export default function inventory() {
  const [data, setData] = useState([])
  const [groups, setGroups] = useState([])
  let [invoiceData, setInvoiceData] = useState([])
  const [query, setQuery] = useState("")
  const [ tot , setTot ] = useState(0)
  let itemGroups = groups.map(ele => ele.name)
 
  const usersData = async () => {
    const headers = getAuthToken()
    let response = await axios.get('https://inventer-ms.herokuapp.com/app/inventory', headers)
    let response2 = await axios.get('https://inventer-ms.herokuapp.com/app/group', headers)

    setData(response.data.results)
    setGroups(response2.data.results)
  }

  const invoice = (e, id) => {
    e.preventDefault()
   
    data.filter(value => {
      if (value.id == id) {
        value["amount"] = e.target.number.value
        value["total_price"] = e.target.number.value * value.price
        console.log(value)
        return (
          setInvoiceData(prev => [value, ...prev]),
          setTot(tot + value.total_price)
        )
      }
    })
  }

  const handleRemove = (e, idx) =>{
    e.preventDefault()
    console.log(idx)
    setInvoiceData([])
    setTot(0)
    invoiceData.forEach((value, index)=>{
      console.log(index, idx)
      if(value.id != idx){
        setInvoiceData(prev => [value, ...prev])
      }else{
        setTot(tot - value.total_price)
        
      }
    })
  }

  useEffect(() => {
    data.length <= 0 && usersData()
  }, [data, groups])


  return (
    <div >
      <Head>
        <title>Inventer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Header />
        <SideBar />
        <div class="w-11/12 flex relative  sm:rounded-lg UsersTable_inv rounded-lg">
          <table class="text-sm text-left text-gray-500 dark:text-gray-400 mt-20 border-collapse border w-2 rounded-lg "  >
            <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400 rounded-lg">
              <tr class="bg-green-500">
                <th scope="col" class="p-4 rounded-l-lg">
                  <div class="flex items-center">
                  </div>
                </th>
                <th scope="col" class="py-3 px-4 text-white">
                  Photo
                </th>
                <th scope="col" class="py-3 px-4 text-white">
                  Item Name
                </th>

                <th scope="col" class="py-3 px-4 text-white">
                  Group
                </th>

                <th scope="col" class="py-3 px-4 text-white">
                  Price
                </th>

                <th scope="col" class="py-3 px-4 text-white">
                  Remaining
                </th>

                <th scope="col" class="py-3 px-4 text-white rounded-r-lg">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody>
              {data.map((ele, index) => {

                if (ele.name.toLowerCase().includes(query)) {
                  return (
                    <tr key={index} class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                      <td class="p-4 w-4 ">
                        <div class="flex items-center">
                        </div>
                      </td>
                      <td class="py-3 px-4">
                        <img className='items-center rounded-lg shadow-md' width={50} src={ele.photo} />
                      </td>
                      <td class="py-3 px-4">
                        {ele.name}
                      </td>
                      <td class="py-3 px-4">
                        {ele.group.name}
                      </td>
                      <td class="py-3 px-4">
                        {ele.price} $
                      </td>
                      <td class="py-3 px-4">
                        {ele.remaining}
                      </td>
                      <td class="py-3 px-4">
                        <div class="custom-number-input h-10 w-32">

                          <form onSubmit={(e) => { invoice(e, ele.id) }} class="flex flex-row h-10 w-full rounded-lg relative bg-transparent mt-1">
                            <input type="number" placeholder="0" class="focus:outline-none text-center w-full bg-gray-100 font-semibold text-md hover:text-black focus:text-black  md:text-basecursor-default flex items-center text-gray-700  outline-none" name="custom-input-number" id="number"></input>
                            <button type='submit' class="bg-green-600 text-white hover:text-gray-700 hover:bg-gray-400 h-full w-20 rounded cursor-pointer ml-2">
                              <span class="m-auto font-bold py-2 px-5">Add</span>
                            </button>
                          </form>
                        </div>
                      </td>
                    </tr>
                  )
                }
              })}

            </tbody>
          </table>
          <div className='w-1/12 m-3'>
            <table class=" w-8/12 text-sm text-left text-gray-500 dark:text-gray-400 mt-20 border-collapse border "  >
              <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                <tr class="bg-gray-100">
                  <th scope="col" class="p-4 ">
                    <div class="flex items-center">
                    </div>
                  </th>
                  <th scope="col" class="py-3 px-4 text-gray-600">
                    Item Name
                  </th>
                  <th scope="col" class="py-3 px-4 text-gray-600">
                    Item price
                  </th>
                  <th scope="col" class="py-3 px-4 text-gray-600">
                    No. of Items
                  </th>
                  <th scope="col" class="py-3 px-4 text-gray-600">
                    Total
                  </th>
                  <th scope="col" class="py-3 px-4 text-gray-600">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody>
                {invoiceData.map((ele, index) => {

                  if (ele.name.toLowerCase().includes(query)) {
                    return (
                      <tr key={index} class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                        <td class="p-4 w-4">
                          <div class="flex items-center">
                          </div>
                        </td>
                        <th scope="row" class="py-4 px-6 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                          {ele.name}
                        </th>
                        <td class="py-3 px-4">
                          {ele.price}
                        </td>
                        <td class="py-3 px-4">
                          {ele.amount}
                        </td>
                        <td class="py-3 px-4">
                          {ele.total_price}
                        </td>
                        <td class="py-3 px-4">
                          <div class="custom-number-input">
                            <form onSubmit={(e)=>handleRemove(e,ele.id)} class="flex flex-row py-2 px-2 rounded-lg relative bg-transparent mt-1">
                              <button type="submit" class="bg-gray-100 text-red-700 hover:text-gray-700 hover:bg-gray-400 rounded cursor-pointer ml-2">
                                <span class="m-auto font-bold py-2 px-5">X</span>
                              </button>
                            </form>

                          </div>
                        </td>
                      </tr>
                    )
                  }
                })}

              </tbody>
            </table>
            <div className='justify-between'>
                <div>Date : {time}</div>
                <div>Total: {tot}</div>
              </div>
          </div>
          <div>Name</div>


        </div>



        <form class=" search_inv flex items-center ">
          <label for="simple-search" class="sr-only">Search</label>
          <div class="relative ">
            <div class="flex absolute inset-y-0 left-0 items-center pl-3 pointer-events-none">
              <svg aria-hidden="true" class="w-5 h-5 text-gray-500 dark:text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path></svg>
            </div>
            <input type="text" id="simple-search" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg  focus:ring-blue-500 focus:border-blue-500 block w-48 pl-10 p-2.5  dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Search" onChange={(e) => setQuery(e.target.value)} />
          </div>
        </form>
      </main>
    </div >

  )
}